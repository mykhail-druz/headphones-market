import type { Config } from '@sanity/groq-store'
import type { EventSourcePolyfill } from 'event-source-polyfill'
import type { GroqStore } from '@sanity/groq-store'
import { ReactNode } from 'react'

/**
 * Checks if the current token, or cookies, result in a valid session
 * @internal
 */
export declare const _checkAuth: (
  projectId: string,
  token: string | null
) => Promise<boolean>

/**
 * @public
 */
export declare const definePreview: (config: PreviewConfig) => UsePreview

/**
 * @internal
 */
export declare const _definePreview: ({
  projectId,
  dataset,
  documentLimit,
  subscriptionThrottleMs,
  importEventSourcePolyfill,
  importGroqStore,
  preload,
  onPublicAccessOnly,
  checkAuth,
  includeTypes,
}: _PreviewConfig) => UsePreview

/**
 * See the typings for `_lazyGroqStore` for detailed usage instructions.
 * @internal
 */
export declare const _lazyEventSourcePolyfill: () => Promise<EventSourcePolyfill>

/**
 * Lazy loaded, heavy, libs. Most use cases want to wrap these in `suspend-react`:
 * ```tsx
 * import {suspend} from 'suspend-react'
 * import {_lazyGroqStore} from '@sanity/preview-kit'
 *
 * export default function PreviewComponent() {
 *   const groqStore = suspend(() => _lazyGroqStore(), ['@sanity/preview-kit', '@sanity/groq-store])
 * }
 * ```
 * This makes them load in any app that uses React 18 and have Suspense features enabled.
 * For Next 13 and React Server Components, they should be wrapped in `React.use` and `React.cache`, this is done for you by `next-sanity`:
 * ```tsx
 * import {cache, use} from 'react'
 * import {_lazyGroqStore} from '@sanity/preview-kit'
 *
 * const lazyGroqStore = cache(_lazyGroqStore)
 *
 * export default function PreviewComponent() {
 *   const groqStore = use(lazyGroqStore())
 * }
 * ```
 * @internal
 */
export declare const _lazyGroqStore: () => Promise<
  (config: Config) => GroqStore
>

/**
 * The params type used both in `@sanity/client`:
 * ```tsx
 * import sanityClient from '@sanity/client'
 *
 * const client = sanityClient()
 * await client.fetch(
 *   '*[_type == "post"]',
 *   params // <-- this is the type
 * )
 * ```
 * It's also used with the `usePreview` hook returned by `definePreview`:
 * ```tsx
 * import {definePreview} from '@sanity/preview-kit'
 * const usePreview = definePreview()
 * usePreview(
 *   token,
 *   '*[_type == "post"]',
 *   params // <-- this is the type
 * )
 * ```
 * @public
 */
export declare type Params = Record<string, unknown>

/**
 * @public
 */
export declare interface PreviewConfig
  extends Pick<Config, 'projectId' | 'dataset' | 'includeTypes'> {
  /**
   * The maximum number of documents, to prevent using too much memory unexpectedly
   * Throws on the first operation (query, retrieval, subscription) if reaching this limit.
   * @defaultValue 3000
   */
  documentLimit?: number
  /**
   * Throttle the event emits to batch updates. If you have a lot of editors changing content at the same time it might help to increase this value to reduce the amount of rerenders React have to perform.
   * @defaultValue 10
   */
  subscriptionThrottleMs?: number
  /**
   * You want to throw an error in this function if it's considered a failure if draft documents can't be queried.
   *
   * Without a `token` then the dataset export will attempt to use reuse the user token by setting `credentials: "include" when calling fetch()`.
   * This only works with the `cookie` auth model you find in Sanity Studio. It doesn't work in browsers that require `cookieless` to login, such as iOS Safari and more.
   * Currently the only way to fix this is to define a `token` that has `viewer` rights in your project.
   * It's not recommended to rely on auth at the moment as it limits the use of previews to Chromium based browsers and users that have a Sanity account in the project.
   * If you still want to use the `cookie` auth model you'll want to throw an error if the user don't have a cookie based session established. If this method is undefined, the default, it'll only query published, public, documents.
   * ```tsx
   * import {definePreview} from '@sanity/preview-kit'
   * const usePreview = definePreview({
   *  onPublicAccessOnly: () => {
   *   throw new Error('Not authenticated - preview not available')
   * })
   * ```
   *
   * If you're building a preview experience that doesn't query drafts then you can just leave this function undefined.
   *
   * Enabling this will slightly slow-down startup as it will wait with exporting the dataset until it has checked if you have a cookie session.
   * This check is done by calling `https://${projectId}.api.sanity.io/v1/users/me` with fetch() and `credentials: "include"`.
   * If `token` is set it'll set `headers: {Authorization: "Bearer ${token}"}` instead.
   * But if you're already setting `token` you can skip defining this function to run startup faster, if the `token` is invalid it'll throw while exporting the dataset anyway.
   */
  onPublicAccessOnly?: () => void
}

/**
 * @internal
 */
export declare interface _PreviewConfig extends PreviewConfig {
  /**
   * Lazy load `@sanity/groq-store`.
   */
  importGroqStore: () => (config: Config) => GroqStore
  /**
   * Lazy load `event-source-polyfille`.
   * This happens if `token` is specified.
   */
  importEventSourcePolyfill: () => EventSourcePolyfill
  /**
   * Suspend render until the dataset is done loading.
   */
  preload: <R = any, P extends Params = Params, Q extends string = string>(
    store: GroqStore,
    query: Q,
    /**
     * Must wrap in `useMemo` to avoid infinite loop
     */
    params?: P
  ) => R | null
  /**
   * Only called if `onPublicAccessOnly` is defined. Render is suspended until this Promise resolves to a boolean.
   */
  checkAuth: (projectId: string, token: string | null) => boolean
}

/**
 * Preview Mode really needs to only load as client-only, as it uses EventSource to stream data from Content Lake.
 * We don't want to run anything on the server but the fallback until it's loaded.
 * It's used in the same way as `React.Suspense`, it just also defers render until the component is mounted:
 * ```tsx
 * import {PreviewSuspense} from '@sanity/preview-kit'
 *
 * export default function App() {
 *   return (
 *     <PreviewSuspense fallback={<div>Loading preview...</div>}>
 *       <ComponentUsingPreviewHooks />
 *     </PreviewSuspense>
 *   )
 * }
 * ```
 * @public
 */
export declare function PreviewSuspense({
  children,
  fallback,
}: PreviewSuspenseProps): JSX.Element

/** @public */
export declare type PreviewSuspenseProps = {
  children: ReactNode
  fallback: ReactNode
}

/**
 * @public
 */
export declare type UsePreview<R = any, P = Params, Q = string> = (
  token: string | null,
  query: Q,
  params?: P
) => R | null

export {}
