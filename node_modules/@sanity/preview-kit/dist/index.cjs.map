{"version":3,"file":"index.cjs","sources":["../src/auth.ts","../src/lazy.ts","../src/definePreview.ts","../src/PreviewSuspense.tsx"],"sourcesContent":["/**\n * Checks if the current token, or cookies, result in a valid session\n * @internal\n */\nexport const _checkAuth = async (\n  projectId: string,\n  token: string | null\n): Promise<boolean> => {\n  const headers = token ? { Authorization: `Bearer ${token}` } : undefined\n  const res = await fetch(`https://${projectId}.api.sanity.io/v1/users/me`, {\n    credentials: 'include',\n    headers,\n  })\n  const json = await res.json()\n  return Boolean(json?.id)\n}\n","import type { Config, GroqStore } from '@sanity/groq-store'\nimport type { EventSourcePolyfill as EventSourcePolyfillType } from 'event-source-polyfill'\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * Lazy loaded, heavy, libs. Most use cases want to wrap these in `suspend-react`:\n * ```tsx\n * import {suspend} from 'suspend-react'\n * import {_lazyGroqStore} from '@sanity/preview-kit'\n *\n * export default function PreviewComponent() {\n *   const groqStore = suspend(() => _lazyGroqStore(), ['@sanity/preview-kit', '@sanity/groq-store])\n * }\n * ```\n * This makes them load in any app that uses React 18 and have Suspense features enabled.\n * For Next 13 and React Server Components, they should be wrapped in `React.use` and `React.cache`, this is done for you by `next-sanity`:\n * ```tsx\n * import {cache, use} from 'react'\n * import {_lazyGroqStore} from '@sanity/preview-kit'\n *\n * const lazyGroqStore = cache(_lazyGroqStore)\n *\n * export default function PreviewComponent() {\n *   const groqStore = use(lazyGroqStore())\n * }\n * ```\n * @internal\n */\nexport const _lazyGroqStore = async () => {\n  const pkg = await import('@sanity/groq-store')\n  const { groqStore } = 'default' in pkg ? pkg.default : pkg\n  return groqStore as (config: Config) => GroqStore\n}\n\n/**\n * See the typings for `_lazyGroqStore` for detailed usage instructions.\n * @internal\n */\nexport const _lazyEventSourcePolyfill = async () => {\n  const pkg = await import('event-source-polyfill')\n  const { EventSourcePolyfill } = 'default' in pkg ? pkg.default : pkg\n  return EventSourcePolyfill as unknown as EventSourcePolyfillType\n}\n","import type { Config, GroqStore } from '@sanity/groq-store'\nimport type { EventSourcePolyfill } from 'event-source-polyfill'\nimport { useEffect, useMemo, useSyncExternalStore } from 'react'\nimport { suspend } from 'suspend-react'\n\nimport { _checkAuth } from './auth'\nimport { _lazyEventSourcePolyfill, _lazyGroqStore } from './lazy'\n\n/**\n * The params type used both in `@sanity/client`:\n * ```tsx\n * import sanityClient from '@sanity/client'\n *\n * const client = sanityClient()\n * await client.fetch(\n *   '*[_type == \"post\"]',\n *   params // <-- this is the type\n * )\n * ```\n * It's also used with the `usePreview` hook returned by `definePreview`:\n * ```tsx\n * import {definePreview} from '@sanity/preview-kit'\n * const usePreview = definePreview()\n * usePreview(\n *   token,\n *   '*[_type == \"post\"]',\n *   params // <-- this is the type\n * )\n * ```\n * @public\n */\nexport type Params = Record<string, unknown>\n\n/**\n * @internal\n */\nexport interface _PreviewConfig extends PreviewConfig {\n  /**\n   * Lazy load `@sanity/groq-store`.\n   */\n  importGroqStore: () => (config: Config) => GroqStore\n  /**\n   * Lazy load `event-source-polyfille`.\n   * This happens if `token` is specified.\n   */\n  importEventSourcePolyfill: () => EventSourcePolyfill\n  /**\n   * Suspend render until the dataset is done loading.\n   */\n  preload: <R = any, P extends Params = Params, Q extends string = string>(\n    store: GroqStore,\n    query: Q,\n    /**\n     * Must wrap in `useMemo` to avoid infinite loop\n     */\n    params?: P\n  ) => R | null\n  /**\n   * Only called if `onPublicAccessOnly` is defined. Render is suspended until this Promise resolves to a boolean.\n   */\n  checkAuth: (projectId: string, token: string | null) => boolean\n}\n\n/**\n * Return params that are stable with deep equal as long as the key order is the same\n * @internal\n */\nfunction useParams<P extends Params = Params>(params?: P): P {\n  const stringifiedParams = useMemo(\n    () => JSON.stringify(params || null),\n    [params]\n  )\n  return useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams])\n}\n\n/**\n * @internal\n */\nexport const _definePreview = ({\n  projectId,\n  dataset,\n  documentLimit = 3000,\n  subscriptionThrottleMs = 10,\n  importEventSourcePolyfill,\n  importGroqStore,\n  preload,\n  onPublicAccessOnly,\n  checkAuth,\n  includeTypes,\n}: _PreviewConfig): UsePreview => {\n  if (!projectId) {\n    console.warn(`No projectId set for createPreviewHook, returning dummy hook`)\n    // No projectId set, just return a dummy hook and warn\n    const usePreview: UsePreview = function usePreview() {\n      console.warn(\n        `The hook returned by createPreviewHook is a dummy as there is no projectId set, returning null`\n      )\n      return null\n    }\n    return usePreview\n  }\n\n  let store: ReturnType<typeof import('@sanity/groq-store').groqStore>\n  return function usePreview<\n    R = any,\n    P extends Params = Params,\n    Q extends string = string\n  >(token: string | null, query: Q, _params?: P): R | null {\n    if (typeof document === 'undefined') {\n      throw new Error(\n        `Calling usePreview outside a browser environment isn't supported. Ensure the component using the hook is only rendering on the client. For example by wrapping it in PreviewSuspense.`\n      )\n    }\n    if (!token && token !== null) {\n      throw new Error(\n        'No `token` given to usePreview hook, if this is intentional then set it to `null`'\n      )\n    }\n\n    const params = useParams<P>(_params)\n\n    if (!store) {\n      if (onPublicAccessOnly) {\n        const hasAuth = checkAuth(projectId, token)\n        if (!hasAuth) {\n          onPublicAccessOnly()\n        }\n      }\n\n      // Lazy load `@sanity/groq-store` as it's quite a big chunk of JS`\n      const groqStore = importGroqStore()\n\n      store = groqStore({\n        projectId,\n        dataset,\n        documentLimit,\n        subscriptionThrottleMs,\n        includeTypes,\n        token: token === null ? undefined : token,\n        // Lazy load the huge `event-source-polyfill`, but only if a token is specified\n        EventSource: token === null ? undefined : importEventSourcePolyfill(),\n        listen: true,\n        overlayDrafts: true,\n      })\n    }\n\n    const initial = preload<R, P, Q>(store, query, params)\n    const syncStore = useMemo(() => {\n      // Make sure that React suspends the component until the groq store is finished loading the dataset and able to execute the query\n      let snapshot = initial\n\n      return {\n        getSnapshot: () => snapshot,\n        subscribe: (onStoreChange: () => void) => {\n          const subscription = store.subscribe(\n            query,\n            typeof params === 'undefined' ? {} : params,\n            (err, result) => {\n              if (err) {\n                console.error(\n                  'Error thrown in the usePreviewHook subscription',\n                  err\n                )\n                throw err\n              } else {\n                snapshot = result\n                onStoreChange()\n              }\n            }\n          )\n\n          return () => subscription.unsubscribe()\n        },\n      }\n    }, [initial, params, query])\n\n    useEffect(() => {\n      const callback = () => {\n        store.close()\n      }\n      window.addEventListener('beforeunload', callback)\n      return () => window.removeEventListener('beforeunload', callback)\n    }, [])\n\n    return useSyncExternalStore(syncStore.subscribe, syncStore.getSnapshot)\n  }\n}\n\n/**\n * @public\n */\nexport type UsePreview<R = any, P = Params, Q = string> = (\n  token: string | null,\n  query: Q,\n  params?: P\n) => R | null\n\n/**\n * @public\n */\nexport interface PreviewConfig\n  extends Pick<Config, 'projectId' | 'dataset' | 'includeTypes'> {\n  /**\n   * The maximum number of documents, to prevent using too much memory unexpectedly\n   * Throws on the first operation (query, retrieval, subscription) if reaching this limit.\n   * @defaultValue 3000\n   */\n  documentLimit?: number\n  /**\n   * Throttle the event emits to batch updates. If you have a lot of editors changing content at the same time it might help to increase this value to reduce the amount of rerenders React have to perform.\n   * @defaultValue 10\n   */\n  subscriptionThrottleMs?: number\n  /**\n   * You want to throw an error in this function if it's considered a failure if draft documents can't be queried.\n   *\n   * Without a `token` then the dataset export will attempt to use reuse the user token by setting `credentials: \"include\" when calling fetch()`.\n   * This only works with the `cookie` auth model you find in Sanity Studio. It doesn't work in browsers that require `cookieless` to login, such as iOS Safari and more.\n   * Currently the only way to fix this is to define a `token` that has `viewer` rights in your project.\n   * It's not recommended to rely on auth at the moment as it limits the use of previews to Chromium based browsers and users that have a Sanity account in the project.\n   * If you still want to use the `cookie` auth model you'll want to throw an error if the user don't have a cookie based session established. If this method is undefined, the default, it'll only query published, public, documents.\n   * ```tsx\n   * import {definePreview} from '@sanity/preview-kit'\n   * const usePreview = definePreview({\n   *  onPublicAccessOnly: () => {\n   *   throw new Error('Not authenticated - preview not available')\n   * })\n   * ```\n   *\n   * If you're building a preview experience that doesn't query drafts then you can just leave this function undefined.\n   *\n   * Enabling this will slightly slow-down startup as it will wait with exporting the dataset until it has checked if you have a cookie session.\n   * This check is done by calling `https://${projectId}.api.sanity.io/v1/users/me` with fetch() and `credentials: \"include\"`.\n   * If `token` is set it'll set `headers: {Authorization: \"Bearer ${token}\"}` instead.\n   * But if you're already setting `token` you can skip defining this function to run startup faster, if the `token` is invalid it'll throw while exporting the dataset anyway.\n   */\n  onPublicAccessOnly?: () => void\n}\n\n/**\n * @internal\n */\nconst _preloadQuery = (store: GroqStore, query: string, params?: Params) =>\n  // eslint-disable-next-line no-warning-comments\n  // @todo: fix the casting to any here\n  store.query<any>(query, params)\n\n/**\n * @public\n */\nexport const definePreview = (config: PreviewConfig): UsePreview =>\n  _definePreview({\n    ...config,\n    importEventSourcePolyfill: () =>\n      suspend(\n        () => _lazyEventSourcePolyfill(),\n        ['@sanity/preview-kit', 'event-source-polyfill']\n      ),\n    importGroqStore: () =>\n      suspend(\n        () => _lazyGroqStore(),\n        ['@sanity/preview-kit', '@sanity/groq-store']\n      ),\n    preload: (store, query, params) =>\n      suspend(\n        () => _preloadQuery(store, query, params),\n        [\n          '@sanity/preview-kit',\n          'preload',\n          query,\n          JSON.stringify(params ?? null),\n        ]\n      ),\n    checkAuth: (projectId, token) =>\n      suspend(\n        () => _checkAuth(projectId, token),\n        ['@sanity/preview-kit', 'checkAuth', projectId, token]\n      ),\n  })\n","import { type ReactNode, Suspense, useEffect, useReducer } from 'react'\n\n/** @public */\nexport type PreviewSuspenseProps = {\n  children: ReactNode\n  fallback: ReactNode\n}\n\n/**\n * Preview Mode really needs to only load as client-only, as it uses EventSource to stream data from Content Lake.\n * We don't want to run anything on the server but the fallback until it's loaded.\n * It's used in the same way as `React.Suspense`, it just also defers render until the component is mounted:\n * ```tsx\n * import {PreviewSuspense} from '@sanity/preview-kit'\n *\n * export default function App() {\n *   return (\n *     <PreviewSuspense fallback={<div>Loading preview...</div>}>\n *       <ComponentUsingPreviewHooks />\n *     </PreviewSuspense>\n *   )\n * }\n * ```\n * @public\n */\nexport function PreviewSuspense({ children, fallback }: PreviewSuspenseProps) {\n  const [mounted, mount] = useReducer(() => true, false)\n  useEffect(mount, [mount])\n\n  return (\n    <Suspense fallback={fallback}>{mounted ? children : fallback}</Suspense>\n  )\n}\n"],"names":["_checkAuth","projectId","token","headers","Authorization","res","fetch","credentials","json","Boolean","id","_lazyGroqStore","pkg","groqStore","default","_lazyEventSourcePolyfill","EventSourcePolyfill","useParams","params","stringifiedParams","useMemo","JSON","stringify","parse","_definePreview","dataset","documentLimit","subscriptionThrottleMs","importEventSourcePolyfill","importGroqStore","preload","onPublicAccessOnly","checkAuth","includeTypes","console","warn","usePreview","store","query","_params","document","Error","hasAuth","EventSource","listen","overlayDrafts","initial","syncStore","snapshot","getSnapshot","subscribe","onStoreChange","subscription","err","result","error","unsubscribe","useEffect","callback","close","window","addEventListener","removeEventListener","useSyncExternalStore","_preloadQuery","definePreview","config","suspend","PreviewSuspense","children","fallback","mounted","mount","useReducer","jsx","Suspense"],"mappings":"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"}