'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var imageUrlBuilder = require('@sanity/image-url');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var imageUrlBuilder__default = /*#__PURE__*/_interopDefaultLegacy(imageUrlBuilder);

const DEFAULT_FALLBACK_IMAGE_QUALITY = 75;
const DEFAULT_IMAGE_BUILDER = (imageUrlBuilder, options) => {
    const result = imageUrlBuilder
        .quality(options.quality || DEFAULT_FALLBACK_IMAGE_QUALITY)
        .fit('clip');
    if (options.width !== null) {
        return result.width(options.width);
    }
    return result;
};
function getSanityRefId(image) {
    if (typeof image === 'string') {
        return image;
    }
    const obj = image;
    const ref = image;
    const img = image;
    if (typeof image === 'string') {
        return image;
    }
    if (obj.asset) {
        return obj.asset._ref || obj.asset._id;
    }
    return ref._ref || img._id || '';
}
function getImageDimensions(id) {
    const dimensions = id.split('-')[2];
    const [width, height] = dimensions.split('x').map((num) => parseInt(num, 10));
    const aspectRatio = width / height;
    return { width, height, aspectRatio };
}
function getCroppedDimensions(image, baseDimensions) {
    const crop = image.crop;
    if (!crop) {
        return baseDimensions;
    }
    const { width, height } = baseDimensions;
    const croppedWidth = width * (1 - (crop.left + crop.right));
    const croppedHeight = height * (1 - (crop.top + crop.bottom));
    return {
        width: croppedWidth,
        height: croppedHeight,
        aspectRatio: croppedWidth / croppedHeight
    };
}
function useNextSanityImage(sanityClient, image, options) {
    const imageBuilder = options?.imageBuilder || DEFAULT_IMAGE_BUILDER;
    return react.useMemo(() => {
        if (!image) {
            return null;
        }
        // If the image has an alt text but does not contain an actual asset, the id will be
        // undefined: https://github.com/bundlesandbatches/next-sanity-image/issues/14
        const id = image ? getSanityRefId(image) : null;
        if (!id) {
            return null;
        }
        const originalImageDimensions = getImageDimensions(id);
        const croppedImageDimensions = getCroppedDimensions(image, originalImageDimensions);
        const loader = ({ width, quality }) => {
            return (imageBuilder(imageUrlBuilder__default["default"](sanityClient).image(image).auto('format'), {
                width,
                originalImageDimensions,
                croppedImageDimensions,
                quality: quality || null
            }).url() || '');
        };
        const baseImgBuilderInstance = imageBuilder(imageUrlBuilder__default["default"](sanityClient).image(image).auto('format'), {
            width: null,
            originalImageDimensions,
            croppedImageDimensions,
            quality: null
        });
        const width = baseImgBuilderInstance.options.width ||
            (baseImgBuilderInstance.options.maxWidth
                ? Math.min(baseImgBuilderInstance.options.maxWidth, croppedImageDimensions.width)
                : croppedImageDimensions.width);
        const height = baseImgBuilderInstance.options.height ||
            (baseImgBuilderInstance.options.maxHeight
                ? Math.min(baseImgBuilderInstance.options.maxHeight, croppedImageDimensions.height)
                : Math.round(width / croppedImageDimensions.aspectRatio));
        return {
            loader,
            src: baseImgBuilderInstance.url(),
            width,
            height
        };
    }, [imageBuilder, image, sanityClient]);
}

exports.useNextSanityImage = useNextSanityImage;
